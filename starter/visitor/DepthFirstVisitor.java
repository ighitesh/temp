//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirstVisitor implements Visitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   public StringBuilder output = new StringBuilder();
   private int indentLevel = 0;

   private Map<String, String> globalConstants = new HashMap<>();

   private void printIndent() {
      for (int i = 0; i < indentLevel; i++) {
         output.append("    ");
      }
   }

   public void printOutput() {
      System.out.println(output.toString());
   }

   private String evaluateExpression(Node expr) {
      if (expr instanceof Expression){
         if(expr instanceof IntegerLiteral){
            return ((IntegerLiteral) expr).f0.tokenImage;
         }
         else if (expr instanceof Identifier) {
            String varName = ((Identifier) expr).f0.tokenImage;
            return globalConstants.get(varName); // Get constant value if available
        }
      }
      else{
         return null;
      }
      return "";
  }  

   public void visit(NodeList n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
   }

   public void visit(NodeSequence n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeToken n) { }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public void visit(Goal n) {
      // System.out.println("Starting Goal...");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      // System.out.println("Closing Goal...");
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public void visit(MainClass n) {
      // System.out.println("Starting MainClass...");
      n.f0.accept(this);
      // n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      // n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      
      output.append("class ").append(n.f1.f0.tokenImage).append(" {\n");
      // System.out.println("class " + n.f1.f0.tokenImage + " {");
      indentLevel++;
      printIndent();
      output.append("public static void main(String[] ").append(n.f11.f0.tokenImage).append(") {\n");
      // System.out.println("public static void main(String[] " + n.f11.f0.tokenImage + ") {");
      indentLevel++;
      
      n.f14.accept(this);
      n.f15.accept(this);
      
      indentLevel--;
      printIndent();
      output.append("}\n");
      // System.out.println("}");
      indentLevel--;
      output.append("}\n");
      // System.out.println("}");
      
      n.f16.accept(this);
      n.f17.accept(this);
      // System.out.println("Closing MainClass...");
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public void visit(TypeDeclaration n) {
      // System.out.println("Starting TypeDeclaration...");
      n.f0.accept(this);
      // System.out.println("Closing TypeDeclaration...");
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public void visit(ClassDeclaration n) {
      // System.out.println("Starting ClassDeclaration...");
      n.f0.accept(this);
      // n.f1.accept(this);
      n.f2.accept(this);
      
      output.append("class ").append(n.f1.f0.tokenImage).append(" {\n");
      // System.out.println("class " + n.f1.f0.tokenImage + " {");
      indentLevel++;
      
      n.f3.accept(this);
      n.f4.accept(this);
      
      indentLevel--;
      output.append("}\n");
      // System.out.println("}");

      n.f5.accept(this);
      // System.out.println("Closing ClassDeclaration...");
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public void visit(ClassExtendsDeclaration n) {
      // System.out.println("Starting ClassExtendsDeclaration...");
      n.f0.accept(this);
      // n.f1.accept(this);
      n.f2.accept(this);
      // n.f3.accept(this);

      output.append("class ").append(n.f1.f0.tokenImage).append(" extends ").append(n.f3.f0.tokenImage).append(" {\n");
      // System.out.println("class " + n.f1.f0.tokenImage + " extends " + n.f3.f0.tokenImage + " {");
      indentLevel++;

      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);

      indentLevel--;
      output.append("}\n");
      // System.out.println("}");

      n.f7.accept(this);
      // System.out.println("Closing ClassExtendsDeclaration...");
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public void visit(VarDeclaration n) {
      // System.out.println("Starting VarDeclaration...");
      
      printIndent();

      n.f0.accept(this);

      output.append(" ").append(n.f1.f0.tokenImage).append(";\n");
      // System.out.println(n.f0 + " " + n.f1.f0.tokenImage + ";");

      // n.f1.accept(this);
      n.f2.accept(this);
      // System.out.println("Closing VarDeclaration...");
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public void visit(MethodDeclaration n) {
      // System.out.println("Starting MethodDeclaration...");
      n.f0.accept(this);
      // n.f1.accept(this);
      // n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      
      printIndent();
      output.append("public int ").append(n.f2.f0.tokenImage).append("() {\n");
      // System.out.println("public int " + n.f2.f0.tokenImage + "() {");
      indentLevel++;

      n.f7.accept(this);
      n.f8.accept(this);

      printIndent();
      output.append("return ").append(n.f10.f0.tokenImage).append(";\n");
      // System.out.println("return " + n.f10.f0.tokenImage + ";");
      indentLevel--;
      printIndent();
      output.append("}\n");
      // System.out.println("}");

      n.f9.accept(this);
      // n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      
      // System.out.println("Closing MethodDeclaration...");
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public void visit(FormalParameterList n) {
      // System.out.println("Starting FormalParameterList...");
      n.f0.accept(this);
      n.f1.accept(this);
      // System.out.println("Closing FormalParameterList...");
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public void visit(FormalParameter n) {
      // System.out.println("Starting FormalParameter...");
      n.f0.accept(this);
      n.f1.accept(this);
      // System.out.println("Closing FormalParameter...");
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public void visit(FormalParameterRest n) {
      // System.out.println("Starting FormalParameterRest...");
      n.f0.accept(this);
      n.f1.accept(this);
      // System.out.println("Closing FormalParameterRest...");
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public void visit(Type n) {
      // System.out.println("Starting Type...");
      n.f0.accept(this);
      // System.out.println("Closing Type...");
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public void visit(ArrayType n) {
      // System.out.println("Starting ArrayType...");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      output.append("int[]");
      // System.out.println("int[]");
      // System.out.println("Closing ArrayType...");
   }

   /**
    * f0 -> "boolean"
    */
   public void visit(BooleanType n) {
      // System.out.println("Starting BooleanType...");
      n.f0.accept(this);
      output.append("boolean");
      // System.out.println("boolean");
      // System.out.println("Closing BooleanType...");
   }

   /**
    * f0 -> "int"
    */
   public void visit(IntegerType n) {
      // System.out.println("Starting IntegerType...");
      n.f0.accept(this);
      output.append("int");
      // System.out.println("int");
      // System.out.println("Closing IntegerType...");
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public void visit(Statement n) {
      // System.out.println("Starting Statement...");
      n.f0.accept(this);
      // System.out.println("Closing Statement...");
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public void visit(Block n) {
      // System.out.println("Starting Block...");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      // System.out.println("Closing Block...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public void visit(AssignmentStatement n) {
      // System.out.println("Starting AssignmentStatement...");

      String varName = n.f0.f0.tokenImage; // Extract variable name
      String value = evaluateExpression(n.f2); // Pass the correct node type
   
      // if (value != null) {
      //       globalConstants.put(varName, value);
      //       System.out.println("[DEBUG] Assigned constant: " + varName + " = " + value);
      // } else {
      //       globalConstants.remove(varName);
      //       System.out.println("[DEBUG] Removing constant: " + varName + " due to non-constant assignment");
      // }

      printIndent();
      // output.append(n.f0.f0.tokenImage).append(" = ");

      n.f0.accept(this);
      output.append(" = ");
      // System.out.println(n.f0.f0.tokenImage + " = ");
      n.f1.accept(this);
      n.f2.accept(this);

      output.append(";\n");
      // System.out.println(";");

      n.f3.accept(this);
      // System.out.println("Closing AssignmentStatement...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public void visit(ArrayAssignmentStatement n) {
      // System.out.println("Starting ArrayAssignmentStatement...");
      printIndent();
      n.f0.accept(this);
      n.f1.accept(this);
      output.append("[");
      // System.out.println("[");
      n.f2.accept(this);
      output.append("]");
      // System.out.println("]");
      n.f3.accept(this);
      output.append(" = ");
      // System.out.println(" = ");
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      output.append(";\n");
      // System.out.println(";");
      // System.out.println("Closing ArrayAssignmentStatement...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public void visit(FieldAssignmentStatement n) {
      // System.out.println("Starting FieldAssignmentStatement...");
      printIndent();
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      output.append(" = ");
      // System.out.println(" = ");
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      output.append(";\n");
      // System.out.println(";");
      // System.out.println("Closing FieldAssignmentStatement...");
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public void visit(IfStatement n) {
      // System.out.println("Starting IfStatement...");
      n.f0.accept(this);
      // System.out.println("Closing IfStatement...");
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public void visit(IfthenStatement n) {
      // System.out.println("Starting IfthenStatement...");
      printIndent();
      output.append("if(");
      // System.out.print("if (");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      output.append(") {\n");
      // System.out.println(") {");
      indentLevel++;
      n.f3.accept(this);
      n.f4.accept(this);
      indentLevel--;
      printIndent();
      output.append("}\n");
      // System.out.println("}");
      // System.out.println("Closing IfthenStatement...");
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public void visit(IfthenElseStatement n) {
      // System.out.println("Starting IfthenElseStatement...");
      printIndent();
      output.append("if(");
      // System.out.print("if (");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      output.append(") {\n");
      // System.out.println(") {");
      indentLevel++;
      n.f3.accept(this);
      n.f4.accept(this);
      output.append("} else{\n");
      // System.out.println("} else {");
      n.f5.accept(this);
      n.f6.accept(this);
      indentLevel--;
      printIndent();
      output.append("}\n");
      // System.out.println("}");
      // System.out.println("Closing IfthenElseStatement...");
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public void visit(WhileStatement n) {
      // System.out.println("Starting WhileStatement...");
      printIndent();
      output.append("while(");
      // System.out.print("while (");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      output.append(") {\n");
      // System.out.println(") {");
      indentLevel++;
      n.f3.accept(this);
      n.f4.accept(this);
      indentLevel--;
      printIndent();
      output.append("}\n");
      // System.out.println("}");
      // System.out.println("Closing WhileStatement...");
   }

   /**
    * f0 -> "// System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public void visit(PrintStatement n) {
      // System.out.println("Starting PrintStatement...");
      String expressionValue = evaluateExpression(n.f2); // Ensure correct node type

      if (expressionValue != null) {
         System.out.println("[DEBUG] Print constant value: " + expressionValue);
      }

      n.f0.accept(this);
      n.f1.accept(this);

      printIndent();
      output.append("System.out.println(");
      // System.out.print("// System.out.println(");

      n.f2.accept(this);
      
      output.append(");\n");
      // System.out.println(");");
      
      n.f3.accept(this);
      n.f4.accept(this);
      // System.out.println("Closing PrintStatement...");
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public void visit(Expression n) {
      // System.out.println("Starting Expression...");
      n.f0.accept(this);
      // System.out.println("Closing Expression...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&&"
    * f2 -> Identifier()
    */
   public void visit(AndExpression n) {
      // System.out.println("Starting AndExpression...");
      n.f0.accept(this);
      output.append(" && ");
      // System.out.print(" && ");
      n.f1.accept(this);
      n.f2.accept(this);
      // System.out.println("Closing AndExpression...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "||"
    * f2 -> Identifier()
    */
   public void visit(OrExpression n) {
      // System.out.println("Starting OrExpression...");
      n.f0.accept(this);
      output.append(" || ");
      // System.out.print(" || ");
      n.f1.accept(this);
      n.f2.accept(this);
      // System.out.println("Closing OrExpression...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<="
    * f2 -> Identifier()
    */
   public void visit(CompareExpression n) {
      // System.out.println("Starting CompareExpression...");
      n.f0.accept(this);
      output.append(" <= ");
      // System.out.print(" <= ");
      n.f1.accept(this);
      n.f2.accept(this);
      // System.out.println("Closing CompareExpression...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "!="
    * f2 -> Identifier()
    */
   public void visit(neqExpression n) {
      // System.out.println("Starting neqExpression...");
      n.f0.accept(this);
      output.append(" != ");
      // System.out.print(" != ");
      n.f1.accept(this);
      n.f2.accept(this);
      // System.out.println("Closing neqExpression...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public void visit(PlusExpression n) {
      // System.out.println("Starting PlusExpression...");
      n.f0.accept(this);
      output.append(" + ");
      // System.out.print(" + ");
      n.f1.accept(this);
      n.f2.accept(this);
      // System.out.println("Closing PlusExpression...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public void visit(MinusExpression n) {
      // System.out.println("Starting MinusExpression...");
      n.f0.accept(this);
      output.append(" - ");
      // System.out.print(" - ");
      n.f1.accept(this);
      n.f2.accept(this);
      // System.out.println("Closing MinusExpression...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public void visit(TimesExpression n) {
      // System.out.println("Starting TimesExpression...");
      n.f0.accept(this);
      output.append(" * ");
      // System.out.print(" * ");
      n.f1.accept(this);
      n.f2.accept(this);
      // System.out.println("Closing TimesExpression...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "/"
    * f2 -> Identifier()
    */
   public void visit(DivExpression n) {
      // System.out.println("Starting DivExpression...");
      n.f0.accept(this);
      output.append(" / ");
      // System.out.print(" / ");
      n.f1.accept(this);
      n.f2.accept(this);
      // System.out.println("Closing DivExpression...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public void visit(ArrayLookup n) {
      // System.out.println("Starting ArrayLookup...");
      n.f0.accept(this);
      output.append("[");
      // System.out.print("[");
      n.f1.accept(this);
      n.f2.accept(this);
      output.append("]");
      // System.out.print("]");
      n.f3.accept(this);
      // System.out.println("Closing ArrayLookup...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public void visit(ArrayLength n) {
      // System.out.println("Starting ArrayLength...");
      n.f0.accept(this);
      output.append(".length");
      // System.out.print(".length");
      n.f1.accept(this);
      n.f2.accept(this);
      // System.out.println("Closing ArrayLength...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public void visit(MessageSend n) {
      // System.out.println("Starting MessageSend...");
      n.f0.accept(this);
      output.append(".");
      // System.out.print(".");
      n.f1.accept(this);
      n.f2.accept(this);
      output.append("(");
      // System.out.print("(");
      n.f3.accept(this);
      if (n.f4.present()) {
         n.f4.accept(this);}
      
      output.append(")");
      // System.out.print(")");
      
      n.f5.accept(this);
      // System.out.println("Closing MessageSend...");
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public void visit(ArgList n) {
      // System.out.println("Starting ArgList...");
      n.f0.accept(this);
      n.f1.accept(this);
      // System.out.println("Closing ArgList...");
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public void visit(ArgRest n) {
      // System.out.println("Starting ArgRest...");
      n.f0.accept(this);
      n.f1.accept(this);
      // System.out.println("Closing ArgRest...");
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public void visit(PrimaryExpression n) {
      // System.out.println("Starting PrimaryExpression...");
      n.f0.accept(this);
      // System.out.println("Closing PrimaryExpression...");
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n) {
      // n.f0.accept(this);
      output.append(n.f0.tokenImage);
      // System.out.println(n.f0.tokenImage);
   }

   /**
    * f0 -> "true"
    */
   public void visit(TrueLiteral n) {
      n.f0.accept(this);
      output.append("true");
      // System.out.println("true");
   }

   /**
    * f0 -> "false"
    */
   public void visit(FalseLiteral n) {
      n.f0.accept(this);
      output.append("false");
      // System.out.println("false");
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n) {
      // n.f0.accept(this);
      output.append(n.f0.tokenImage);
      // System.out.println(n.f0.tokenImage);
   }

   /**
    * f0 -> "this"
    */
   public void visit(ThisExpression n) {
      n.f0.accept(this);
      output.append("this");
      // System.out.println("this");
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public void visit(ArrayAllocationExpression n) {
      // System.out.println("Starting ArrayAllocationExpression...");
      n.f0.accept(this);
      n.f1.accept(this);
      output.append("new int[");
      // System.out.print("new int[");
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      output.append("]");
      // System.out.println("]");
      // System.out.println("Closing ArrayAllocationExpression...");
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public void visit(AllocationExpression n) {
      // System.out.println("Starting AllocationExpression...");
      output.append("new ");
      // System.out.print("new ");
      n.f0.accept(this);
      n.f1.accept(this);
      output.append("()");
      // System.out.println("()");
      n.f2.accept(this);
      n.f3.accept(this);
      // System.out.println("Closing AllocationExpression...");
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public void visit(NotExpression n) {
      // System.out.println("Starting NotExpression...");
      output.append("!");
      // System.out.print("!");
      n.f0.accept(this);
      n.f1.accept(this);
      // System.out.println("Closing NotExpression...");
   }
}
